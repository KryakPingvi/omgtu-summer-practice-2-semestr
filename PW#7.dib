#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!csharp

public interface ICommand
{
    void Execute();
}

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.

#!csharp

using System.Collections.Concurrent;
using System.Threading;

class ServerThread
{
    public BlockingCollection<ICommand> queue = [];
    public Thread thread;
    public bool SoftStopflag = false;
    public ServerThread()
    {
        thread = new Thread(RunServer);
        thread.Start();
    }
    public void RunServer()
    {
        while (true)
        {
            if (queue.Count==0 && SoftStopflag) 
            {
                break;
            }
            ICommand com = queue.Take();
            try
            {
                com.Execute();
            }
            catch (ThreadInterruptedException)
            {
                break;
            }
        }
    }
    public void AddCommand(ICommand com)
    {
        queue.Add(com);
    }
}

#!csharp

class HardStopCommand(ServerThread serverThread) : ICommand
{
    ServerThread serverThread = serverThread;

    public void Execute()
    {
        throw new ThreadInterruptedException();
    }
}

class SoftStopCommand(ServerThread serverThread) : ICommand
{
    ServerThread serverThread = serverThread;

    public void Execute()
    {
        serverThread.SoftStopflag = true;
    }
}
class TestCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Test");
    }
}

#!csharp

Console.WriteLine("Сервер 1:");
ServerThread server1 = new();

server1.AddCommand(new TestCommand());
server1.AddCommand(new TestCommand());
server1.AddCommand(new SoftStopCommand(server1));
server1.AddCommand(new TestCommand());

server1.thread.Join();

Console.WriteLine("Сервер 2:");

ServerThread server2 = new();

server2.AddCommand(new TestCommand());
server2.AddCommand(new TestCommand());
server2.AddCommand(new HardStopCommand(server2));
server2.AddCommand(new TestCommand());

server2.thread.Join();
